// Solidity program to implement
// the above approach
 
// Build the Contract
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
contract MarksManagmtSys
{
    // Create a structure for
    // student details
    struct Student
    {
    int ID;
    string fName;
    string lName;
    int marks;
    }
    address owner;
    int public stdCount = 0;
    mapping(int => Student) public stdRecords;
    
    modifier onlyOwner
    {
    require(owner == msg.sender);
    _;
    }
    constructor() 
    {
    owner=msg.sender;
    }
    
    // Create a function to add
    // the new records
    function addNewRecords(int _ID,
    string memory _fName,
    string memory _lName,
    int _marks) public onlyOwner
    {
    // Increase the count by 1
    stdCount = stdCount + 1;
    
    // Fetch the student details
    // with the help of stdCount
    stdRecords[stdCount] = Student(_ID, _fName,
    _lName, _marks);
    }
    
    // Create a function to add bonus marks
    function bonusMarks(int _bonus) public onlyOwner
    {
    stdRecords[stdCount].marks =
    stdRecords[stdCount].marks + _bonus;
    }
    
     // Fallback function to handle unexpected calls (with data)
    fallback() external payable {
        // This fallback function will only be triggered if there's data along with the call
       
    }

    // Receive function to handle plain Ether transfers
    receive() external payable {
        // This function allows the contract to receive Ether
         
    }
}